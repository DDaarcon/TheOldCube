using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class GameScript : MonoBehaviour
{

    /* TODO:
        //1. Obrót kostki poprzez swobodne przesuwanie 
        //2. Usuwanie ścian 
        3. UI i wyglad
            //a. --> przyciski zatwierdzanie i anulowanie pokazuja sie w trakcie umieszczania sciany, znajduja sie nad przyciskami wyboru sciany
                //przyciski wyboru sciany (lub caly panel) przyciemnione (blur? / transp?)
            //b. --> design steeringwheel
            //c. --> kolorystyka do zmiany
            //d. --> dodatkowe informacje na ekranie (czas?, jakas punktacja?)
            e. tło do zmiany
            //f. wiecej animacji (partycje przy usuwaniu?, obrot siany przy dopasowywaniu? przesuniecie przy zmianie
                //pozycji przy dopasowywaniu?)
            g. animacja otwierania menu
            h. animacja końca gry (zmniejszająca sie/ zwiekszajaca kostka; inne tło; plaszczyzna ze wzrorem w pieces)

        4. --> Generowanie rozwiązań
            a. losowe seedy oparte o cos innego niz zegar systemowy
        //5. zablokowany obrót do poprawy
        //6. nieobracanie się scian przy zmianie pozycji (nalezy dostosowac obrot workspace do rotacji scian (setting))
        //7. przy wstawianiu nowej sciany pierwsza pozycja powinna byc tą ustawioną do kamery
        //8. zmiana na sciany zlozone z quadów
        9. Ustawienie ścian w przyciskach przy rozdzielczosci 2960x1440
        //10. Czytelniejsze kolory ścian
        11. Oświetlenie
        12. Poziomy
            a. --> łatwe poziomy z ułożoną częściowo kostką
        //13. poprawienie znikania quadu kiedy 2 quady nakładają się na siebie podczas dopasowywania
            //a. ukrywanie kolidujących elementów w finalPieces
        //14. ustawianie przyciskow ze scianami w bardziej losowej kolejnosci (tak zeby lewa nie byla przypisana zawsze do tego samego przycisku itd)
        15. przy obracaniu czerwona sciana nadal zle sie wyświetla jesli koliduje z inna
        //16. przy pierwszym wlaczaniu gry nie laduja sie poziomy
        //17. --> wprowadzenie statystyk i zapisywanie ich
        //18. restart button
        19. SearchForMistakes() do poprawy (wraca do corrcomp za kazdym razem - wolne)
        20. wersja dla poziomego ekranu , wersja dla zmiejszonego ekrau (podział)
        21. panel lewy dostosowywany do zawartości ????
        //22. canvas scaling 50/50
        23. wersja dla 3x3
        //24. przy poziomie 3 znika niepoprawny klocek ze ściany (front przy dopasowywanym top)
        25. zmiana działania steering wheel (zaciskanie w srodek, przeciąganie)
        //26. przy usuwaniu sciany partycje zeby to wyglądalo
        27. wiecej statystyk
        28. obracanie workspace powinno byc bardzie smooth
        29. zegar bugi
        30. info panel text na text mesh pro
        31. audio
            a. dzwieki przyciskow
            b. dzwieki dzialania na kostce
            c. muzyka?
            d. wyciszanie (zapisywane w playerpref?)
        32. zbyt wolne animacje?
        33. fancy shader for pieces
        34. random btn -> canvas2btns close

        
        

        SteeringWheel:
        1. Programowe wyznaczanie wiecej niż 4 pozycji (podzielenie kola na wiecej czesci) (czy na pewno bedzie to db rozwiazanie?)

        WorkspaceRotation:
        //1. dotkniecie poza obszarem i najechanie palcem na obszar nie powinno pozwalac na obrot workspace

        Dodatkowe:
        1. obracanie SCIANY W PRZYCISKU WYBORU SCIANY ruchem palca, powrot do pozycji domyslnej po puszczeniu
        //2. zmiana koloru szescianu (quadów), kiedy nie pasuje i nacisnieto przycisk wstawiania (OK)/ zmiana koloru przez caly czas dopasowywania
        3. inny sposob umieszczania scian
        4. inne rozwiazanie dla dopasowywania scian (bardziej czytelne)
        5. długie nacisniecie na przycisk losowania pozwala wprowadzic seed
    */

    private const bool I = true, O = false;
    public GameObject copyOfPiece;

    public Transform workspace;

    // CORRCOMP SETTING AND OPERATIONS

    private bool[][,] CorrComp = new bool[6][,] {
        new bool[4, 4], new bool[4, 4], new bool[4, 4], new bool[4, 4], new bool[4, 4], new bool[4, 4]
    };

    #if UNITY_EDITOR
    public void VisualizeDataFromCorrComp() {
        string et = 0.ToString();
        et += "State of CorrComp: \n";
        for (int s = 0; s < 6; s++) {
            et += "Side: " + ((side)s).ToString() + '\n';
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < 4; j++) {
                    et += (CorrComp[s][i, j] ? "I" : "O") + "\t";
                }
                et += '\n';
            }
        }
        Debug.Log(et);
    }
    #endif
    private void SetDefaultCorrComp() {
        for (int o = 0; o < 6; o++){
            SetDefaultSide((side)o);
        }
    }
    private void SetDefaultSide(side side_) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                CorrComp[(int)side_][i, j] = O;
            }
        }
    }
    public enum side {bottom = 0, back = 1, left = 2, right = 3, front = 4, top = 5};
    private enum dir {U, L, D, R, Un, Ln, Dn, Rn};
    // direction aNd side
    private struct dNs {
        public side s;
        public dir d;
        public dNs(side s_, dir d_) {
            s = s_;
            d = d_;
        }
    }
    // representation of data below should be in some file for information purposes
    private dNs[,] properEdge = new dNs[6, 4] {
        {new dNs(side.back, dir.D), new dNs(side.left, dir.R), new dNs(side.front, dir.U), new dNs(side.right, dir.L)},     //bottom
        {new dNs(side.top, dir.Un), new dNs(side.left, dir.U), new dNs(side.bottom, dir.U), new dNs(side.right, dir.Un)},   //back
        {new dNs(side.back, dir.L), new dNs(side.top, dir.R), new dNs(side.front, dir.Ln), new dNs(side.bottom, dir.L)},    //left
        {new dNs(side.back, dir.Rn), new dNs(side.bottom, dir.R), new dNs(side.front, dir.R), new dNs(side.top, dir.L)},    //right
        {new dNs(side.bottom, dir.D), new dNs(side.left, dir.Dn), new dNs(side.top, dir.Dn), new dNs(side.right, dir.D)},   //front
        {new dNs(side.back, dir.Un), new dNs(side.right, dir.R), new dNs(side.front, dir.Dn), new dNs(side.left, dir.L)}    //top
    };

    private bool[][,] settingDuringPlacing = new bool[6][,] {
        new bool[4, 4], new bool[4, 4], new bool[4, 4], new bool[4, 4], new bool[4, 4], new bool[4, 4]
    };
    // put edge in 1d array
    private bool[] GetEdge(side side_, dir edge){
        bool[] rtnValue = new bool[4];
        if (edge == dir.U)
            for (int i = 0; i < 4; i++)
                rtnValue[i] = CorrComp[(int)side_][0, i];
        if (edge == dir.L)
            for (int i = 0; i < 4; i++)
                rtnValue[i] = CorrComp[(int)side_][i, 0];
        if (edge == dir.D)
            for (int i = 0; i < 4; i++)
                rtnValue[i] = CorrComp[(int)side_][3, i];
        if (edge == dir.R)
            for (int i = 0; i < 4; i++)
                rtnValue[i] = CorrComp[(int)side_][i, 3];
        if (edge == dir.Un)
            for (int i = 0; i < 4; i++)
                rtnValue[3 - i] = CorrComp[(int)side_][0, i];
        if (edge == dir.Ln)
            for (int i = 0; i < 4; i++)
                rtnValue[3 - i] = CorrComp[(int)side_][i, 0];
        if (edge == dir.Dn)
            for (int i = 0; i < 4; i++)
                rtnValue[3 - i] = CorrComp[(int)side_][3, i];
        if (edge == dir.Rn)
            for (int i = 0; i < 4; i++)
                rtnValue[3 - i] = CorrComp[(int)side_][i, 3];
        return rtnValue;
    }
    // though 4 edges of selected side
    private bool CheckSide(side side_) {
        for (int i = 0; i < 4; i++) {
            if (!Check2Sides(side_, (dir)i))
                return false;
        } 
        return true;
    }
    // find proper edge to check
    private bool Check2Sides(side s1, dir dir_) {
        bool[] edge1, edge2;
        edge1 = GetEdge(s1, dir_);
        dNs dns = properEdge[(int)s1, (int)dir_];
        edge2 = GetEdge(dns.s, dns.d);
        for (int i = 0; i < 4; i++) {
            if (edge1[i] && edge2[i]){
                
                return false;
            }
        }
        return true;
    }
    // versions of above methods with detection of incorrectness
    // and adjacent sides
    private bool CheckSide(side side_, bool[,] setting_, out bool[,] arrang) {
        // arrangment of incorrect cubes
        arrang = new bool[,] {
            {O, O, O, O},
            {O, O, O, O},
            {O, O, O, O},
            {O, O, O, O}
        };
        // setting settingDuringPlacing as copy of CorrComp
        for (int i = 0; i < 6; i++) {
            settingDuringPlacing[i] = (bool[,])CorrComp[i].Clone();
        }

        // check if any incorrectness are spotted
        bool detectedIncorrectness = false;
        for (int i = 0; i < 4; i++) {
            if (!Check2Sides(side_, (dir)i, setting_, ref arrang))
                detectedIncorrectness = true;
        }
        return !detectedIncorrectness;
    }
    private bool Check2Sides(side s1, dir dir_, bool[,] setting_, ref bool[,] arrang) {
        bool detectedIncorrectness = false;
        bool[] edge1, edge2;
        // get proper edge of side being placed
        edge1 = new bool[4];
        if (dir_ == dir.U)
            for (int i = 0; i < 4; i++)
                edge1[i] = setting_[0, i];
        if (dir_ == dir.L)
            for (int i = 0; i < 4; i++)
                edge1[i] = setting_[i, 0];
        if (dir_ == dir.D)
            for (int i = 0; i < 4; i++)
                edge1[i] = setting_[3, i];
        if (dir_ == dir.R)
            for (int i = 0; i < 4; i++)
                edge1[i] = setting_[i, 3];
        // get proper edge of adjacent side
        dNs dns = properEdge[(int)s1, (int)dir_];
        edge2 = GetEdge(dns.s, dns.d);
        // loop though edge
        for (int i = 0; i < 4; i++) {
            if (edge1[i] && edge2[i]){
                // set arrang for placing Piece (colored cubes)
                if (dir_ == dir.U) arrang[0, i] = I;
                if (dir_ == dir.L) arrang[i, 0] = I;
                if (dir_ == dir.R) arrang[i, 3] = I;
                if (dir_ == dir.D) arrang[3, i] = I;

                // set settingDuringPlacing for other already positioned Pieces
                int r = 0, c = 0;
                switch (dns.d) {
                    case dir.U: r = 0; c = i; break;
                    case dir.Un: r = 0; c = 3 - i; break;
                    case dir.D: r = 3; c = i; break;
                    case dir.Dn: r = 3; c = 3 - i; break;
                    case dir.L: r = i; c = 0; break;
                    case dir.Ln: r = 3 - i; c = 0; break;
                    case dir.R: r = i; c = 3; break;
                    case dir.Rn: r = 3 - i; c = 3; break;
                }
                settingDuringPlacing[(int)dns.s][r, c] = O;

                detectedIncorrectness = true;
            }
        }
        return !detectedIncorrectness;
    }
    public bool PlaceSideOnCorrComp(side side_, bool[,] arrang) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                CorrComp[(int)side_][i, j] = arrang[i, j];
            }
        }

        if (CheckSide(side_)) 
            return true;
        else {
            SetDefaultSide(side_);
            return false;
        }
    }

    // GENERATION OF RANDOM SOLUTION
    private bool[][,] solution;

    // BUTTONS 
    [Header("Buttons:")]
    public GameObject containerOfButtons;
    private Button[] buttons;
    private int[] piecesIndexes = new int[6];
    private int placingPieceIndex;
    public Color colorForButtonPieces = new Color();
    public GameObject canvasOf2Btns;
    private int[] buttonOrder;
    private void SetButtons(){
        buttons = new Button[6];
        // int[] order = RandomizeButtonOrder();

        for (int i = 0; i < 6; i++) {
            int i2 = i;
            buttons[i] = containerOfButtons.transform.GetChild(i).GetComponent<Button>();
            buttons[i].GetComponent<ApplySettingToBtn>().index = i;
            buttons[i].GetComponent<ApplySettingToBtn>().piece.ChangeColor(colorForButtonPieces);
            // buttons[i].onClick.AddListener(() => PlaceSide(solution[order[i2]], i2));
            // buttons[i].GetComponent<ApplySettingToBtn>().ChangeSetting(solution[order[i]]);
        }
        
    }

    private int[] RandomizeButtonOrder() {
        int[] order = new int[6] {0, 1, 2, 3, 4, 5};
        System.Random random = new System.Random();
        for (int i = 0; i < 3; i++) {
            int first = random.Next(6), second;
            do {
                second = random.Next(6);
            } while (first == second);
            int backup = order[first];
            order[first] = order[second];
            order[second] = backup;

        }
        return order;
    }

    private void RenewButtons() {
        if (buttons[0] == null)
            SetButtons();
        buttonOrder = RandomizeButtonOrder();
        for (int i = 0; i < 6; i++)
        {
            int i2 = i;
            buttons[i].onClick.RemoveAllListeners();
            buttons[i].onClick.AddListener(() => PlaceSide(solution[buttonOrder[i2]], i2));
            buttons[i].GetComponent<ApplySettingToBtn>().ChangeSetting(solution[buttonOrder[i]]);
            buttons[i].GetComponent<ApplySettingToBtn>().Enabled(true);
        }
    }

    private void EnabledButton(int index, bool isEnabled) {
        buttons[index].GetComponent<ApplySettingToBtn>().Enabled(isEnabled);
    }

    // ROTATING WORKSPACE

    private Quaternion defaultRotation;
    private Vector3[] rotationOfWorkspace = new Vector3[6] {
        new Vector3(-90, 0, 0),  // bottom
        new Vector3(0, 0, 0),   // back
        new Vector3(0, 90, 0),  // left
        new Vector3(0, -90, 0), // right
        new Vector3(0, 180, 0), // front
        new Vector3(90, 0, 0)  // top
    };

    // DELETING PIECES

    private RaycastHit hit;

    public void GetDataFromTouch(Vector2 touchPos) {
        if (!duringPlacing) {
            Ray ray = Camera.main.ScreenPointToRay(touchPos);
            

            if (Physics.Raycast(ray, out hit, 5000)) {
                // parent.parent for Piece_v2
                switch (hit.transform.parent.parent.name) {
                    case "bottom":
                        RemoveSideAt(side.bottom);
                        break;
                    case "back":
                        RemoveSideAt(side.back);
                        break;
                    case "left":
                        RemoveSideAt(side.left);
                        break;
                    case "right":
                        RemoveSideAt(side.right);
                        break;
                    case "front":
                        RemoveSideAt(side.front);
                        break;
                    case "top":
                        RemoveSideAt(side.top);
                        break;
                    default:
                        Debug.Log("Diffrent name: " + hit.transform.parent.parent.name);
                    break;
                }
            }
        }
    }

    // APPEARANCE

    private int placedSides = 0;
    private bool[] placedSidesArray = {O, O, O, O, O, O};
    private GameObject[] finalPieces;
    private GameObject placedPiece;
    private side placedSide;
    private bool duringRotationPiece;
    private int pieceRotationInInt = 0;
    private float pieceDestinedRotationY;
    private bool rotationPieceJustStarted = true;
    private bool duringPlacing = false;
    private bool duringRotationWorkspace = false;
    private bool placingJustStarted = true;
    private int posIndex = 0;
    private int rotIndex = 0;
    private bool acceptButtonPressed = false;
    private bool cancelButtonPressed = false;
    private side[] available;
    private int currentPositionFromAvailable = 0;
    enum IndexStateChange {increase, stay, decrease}
    IndexStateChange posState = IndexStateChange.stay;
    IndexStateChange rotState = IndexStateChange.stay;
    private static float lengthOfSide = 20f;
    private static float s3Len = 1.5f * lengthOfSide;
    private Vector3[] positionForSides = new Vector3[6] {
        new Vector3(0, -s3Len, 0),  // bottom
        new Vector3(0, 0, s3Len),   // back
        new Vector3(-s3Len, 0, 0),  // left
        new Vector3(s3Len, 0, 0),   // right
        new Vector3(0, 0, -s3Len),   // front
        new Vector3(0, s3Len, 0),   // top
    };
    private Vector3[] rotationForSides = new Vector3[6] {
        new Vector3(180, 0, 0),   // bottom
        new Vector3(90, 0, 0), // back
        new Vector3(0, 180, -90), // left
        new Vector3(0, 180, 90),  // right
        new Vector3(-90, 0, 0),  // front
        new Vector3(180, 0, 180), // top
    };

    [Header("Appearance:")]
    public Color[] colors = new Color[6];
    public Color colorForPlacing = new Color();
    public Color colorForMistakes = new Color();
    public float movePlacedPieceForwardFor = 0f;
    
    public void GetDataFromWheel(int index, SteeringWheel.RotOrPos rotOrPos_, bool assingIndexesWithoutChanges = false){
        if (assingIndexesWithoutChanges) {
            if (rotOrPos_ == SteeringWheel.RotOrPos.position)
                posIndex = index;
            if (rotOrPos_ == SteeringWheel.RotOrPos.rotation)
                rotIndex = index;
            return;
        }
        if (rotOrPos_ == SteeringWheel.RotOrPos.position){
            if (posIndex == 3 && index == 0)
                posState = IndexStateChange.increase;
            else if (posIndex == 0 && index == 3)
                posState = IndexStateChange.decrease;
            else if (posIndex > index)
                posState = IndexStateChange.decrease;
            else if (posIndex < index)
                posState = IndexStateChange.increase;
            else if (posIndex == index)
                posState = IndexStateChange.stay;
            posIndex = index;
        }

        if (rotOrPos_ == SteeringWheel.RotOrPos.rotation){
            if (rotIndex == 3 && index == 0)
                rotState = IndexStateChange.increase;
            else if (rotIndex == 0 && index == 3)
                rotState = IndexStateChange.decrease;
            else if (rotIndex > index)
                rotState = IndexStateChange.decrease;
            else if (rotIndex < index)
                rotState = IndexStateChange.increase;
            else if (rotIndex == index)
                rotState = IndexStateChange.stay;
            rotIndex = index;
        }
    }

    public void ClickedActionButton(bool accept) {
        if (duringPlacing) {
            if (accept)
                acceptButtonPressed = true;
            else
                cancelButtonPressed = true;
        }
    }

    public void PlaceSide(bool[,] setting_, int buttonIndex) {
        if (!duringPlacing) {
            canvasOf2Btns.SetActive(true);

            EnabledButton(buttonIndex, false);
            placingPieceIndex = buttonIndex;

            if (placedSides == 0) {
                PlaceSideAt(setting_, side.bottom);
                if (randomGameBeforeStart) StartTimer();
                return;
            }

            GetComponent<SoundScript>().PlayChoosedSideSound();

            placedPiece = Instantiate(copyOfPiece, workspace.position, workspace.rotation);
            placedPiece.GetComponent<Piece>().ChangeSetting(setting_);
            placedPiece.transform.parent = workspace;
            duringPlacing = true;
            duringRotationWorkspace = true;
            available = SetAvailableSides();

            Vector3 prevScale = placedPiece.transform.localScale;
            placedPiece.name = "PLACING";
            placedPiece.transform.localScale = Vector3.zero;
            placedPiece.LeanScale(prevScale, 0.1f);
            placedPiece.transform.SetAsFirstSibling();
            placedPiece.GetComponent<Piece>().ChangeColor(colorForPlacing);
            placedPiece.GetComponent<Piece>().ChangeTransparency(0.7f);
            
            SetTransparencyOfAllPlacedSides(0.5f);
        }
    }

    private void SetTransparencyOfAllPlacedSides(float trans) {
        for (int i = 0; i < 6; i++) {
            if (placedSidesArray[i] == true) {
                finalPieces[i].GetComponent<Piece>().ChangeTransparencyInTime(trans, 0.5f);
            }
        }
    }

    private void RemoveSideAt(side side_) {
        placedSides--;
        placedSidesArray[(int)side_] = O;

        finalPieces[(int)side_].GetComponent<Piece>().ChangeTransparencyInTime(0f, 0.3f, true);
        LeanTween.scale(finalPieces[(int)side_], Vector3.zero, 0.3f);

        GetComponent<SoundScript>().PlayDestroySideSound();
        SetDefaultSide(side_);
        EnabledButton(piecesIndexes[(int)side_], true);
    }

    private bool PlaceSideAt(bool[,] setting_, side side_) {
        if (PlaceSideOnCorrComp(side_, setting_)) {
            canvasOf2Btns.SetActive(false);

            placedSides++;
            placedSidesArray[(int)side_] = I;
            piecesIndexes[(int)side_] = placingPieceIndex;
            float placedPieceTransparency = 1f;
            bool fromPlacedPiece = false;
            if (placedPiece != null) {
                fromPlacedPiece = true;
                placedPieceTransparency = placedPiece.GetComponent<Piece>().GetTransparency();
                Destroy(placedPiece);
            }
            
            duringPlacing = false;
            duringRotationWorkspace = false;
            currentPositionFromAvailable = 0;

            finalPieces[(int)side_] = Instantiate(copyOfPiece, workspace.position, workspace.rotation);
            finalPieces[(int)side_].name = side_.ToString(); // essiential for removing
            finalPieces[(int)side_].GetComponent<Piece>().ChangeSetting(setting_);
            finalPieces[(int)side_].GetComponent<Piece>().ChangeColor(colors[(int)side_]);
            if (fromPlacedPiece) {
                finalPieces[(int)side_].GetComponent<Piece>().ChangeTransparency(placedPieceTransparency);
                finalPieces[(int)side_].GetComponent<Piece>().ChangeTransparencyInTime(1f, 0.5f);
            }
            finalPieces[(int)side_].transform.parent = workspace;
            finalPieces[(int)side_].transform.localPosition = positionForSides[(int)side_];
            finalPieces[(int)side_].transform.localEulerAngles = rotationForSides[(int)side_];

            SetTransparencyOfAllPlacedSides(1f);
            GetComponent<SoundScript>().PlayPlaceSideSound();

            if (placedSides == 6) {
                FinishedLevel();
            }

            return true;
        }
        return false;
    }

    private side[] SetAvailableSides() {
        if (placedSides == 1 && placedSidesArray[(int)side.bottom])
            return new side[4] {side.left, side.back, side.right, side.front};
        
        side[] rtn = new side[6 - placedSides];
        int ind = 0;
        for (int i = 1; i < 6; i++) {
            if (placedSidesArray[i] == O){
                rtn[ind] = (side)i;
                ind++;
            }
        }
        return rtn;
    }

    // two methods below are responsible for fixing placedPiece when changing its place
    private void NormalizePlacedSideApperance(side side_) {
        switch (side_) {
            case side.bottom:
            case side.back:
                placedPiece.GetComponent<Piece>().RotateR(2);
                break;
            case side.left:
                placedPiece.GetComponent<Piece>().RotateR(1);
                break;
            case side.right:
                placedPiece.GetComponent<Piece>().RotateR(3);
                break;
            default:
                break;
        }
    }
    private enum turn {left, upside, right, none};
    private void NormalizePlacedSideApperance(side sideStart, side sideEnd) {
        turn[] turns = new turn[6] {turn.upside, turn.upside, turn.left, turn.right, turn.none, turn.none};
        if (turns[(int)sideStart] == turn.none){
            switch (turns[(int)sideEnd]) {
                case turn.left:
                    placedPiece.GetComponent<Piece>().RotateR(3);
                    break;
                case turn.right:
                    placedPiece.GetComponent<Piece>().RotateR(1);
                    break;
                case turn.upside:
                    placedPiece.GetComponent<Piece>().RotateR(2);
                    break;
            }
        }
        if (turns[(int)sideStart] == turn.left){
            switch (turns[(int)sideEnd]) {
                case turn.none:
                    placedPiece.GetComponent<Piece>().RotateR(1);
                    break;
                case turn.right:
                    placedPiece.GetComponent<Piece>().RotateR(2);
                    break;
                case turn.upside:
                    placedPiece.GetComponent<Piece>().RotateR(3);
                    break;
            }
        }
        if (turns[(int)sideStart] == turn.right){
            switch (turns[(int)sideEnd]) {
                case turn.left:
                    placedPiece.GetComponent<Piece>().RotateR(2);
                    break;
                case turn.none:
                    placedPiece.GetComponent<Piece>().RotateR(3);
                    break;
                case turn.upside:
                    placedPiece.GetComponent<Piece>().RotateR(1);
                    break;
            }
        }
        if (turns[(int)sideStart] == turn.upside){
            switch (turns[(int)sideEnd]) {
                case turn.left:
                    placedPiece.GetComponent<Piece>().RotateR(1);
                    break;
                case turn.right:
                    placedPiece.GetComponent<Piece>().RotateR(3);
                    break;
                case turn.none:
                    placedPiece.GetComponent<Piece>().RotateR(2);
                    break;
            }
        }
    }
    
    // two methods below are responsible for getting side faced closest towards camera
    private side GetClosestSide() {

        // z niewiadomych powodów odwraca pewne kierunki
        Vector3[] vects = new Vector3[6] {
            workspace.up,
            -workspace.forward,
            Vector3.Cross(workspace.up, workspace.forward),
            -(Vector3.Cross(workspace.up, workspace.forward)),
            workspace.forward,
            -workspace.up
        };

        Vector3 toCam = workspace.position - Camera.main.transform.position;

        float[] angles = new float[6];

        for (int i = 0; i < 6; i++) {
            angles[i] = Vector3.Angle(toCam, vects[i]);
        }

        int index = 0;
        for (int i = 1; i < 6; i++) {
            if (angles[i] < angles[index]){
                index = i;
            }
        }
        return (side)index;
    }
    private void ApplyClosestToAvailable(){
        side side_ = GetClosestSide();
        for (int i = 0; i < available.Length; i++) {
            if (available[i] == side_){
                currentPositionFromAvailable = i;
                return;
            }
        }
    }

    private void SearchForMistakes() {
        if (duringPlacing) {
            bool[,] arrang;
            for (int i = 0; i < 6; i++) {
                if (placedSidesArray[i]) {
                    finalPieces[i].GetComponent<Piece>().ChangeSetting(CorrComp[i]);
                }
            }
            placedPiece.GetComponent<Piece>().RetrieveColor();
            if (!CheckSide(available[currentPositionFromAvailable], placedPiece.GetComponent<Piece>().GetSetting(), out arrang)) {
                placedPiece.GetComponent<Piece>().ChangeColorFor(colorForMistakes, 1, arrang);
                for (int i = 0; i < 6; i++) {
                    if (placedSidesArray[i]) {
                        finalPieces[i].GetComponent<Piece>().ChangeSetting(settingDuringPlacing[i]);
                    }
                }
            }
        }
        if (!duringPlacing)
        for (int i = 0; i < 6; i++) {
            if (placedSidesArray[i]) {
                finalPieces[i].GetComponent<Piece>().ChangeSetting(CorrComp[i]);
            }
        }
    }

    // GAME AND LEVELS

    [Header("Game and levels:")]
    public LevelMenu levelMenu;
    private int openedLevel = 0;
    private bool levelNotRandom = false;
    private bool[] placedSidesFromSolution;
    private SaveScript saveScript;
    private bool randomGameBeforeStart = false;
    public bool finishedGame {get; private set;} = false; // maybe useful for displaying time of game

    private void GameBasicInit() {
        placedSides = 0;
        for (int i = 0; i < 6; i++) {
            placedSidesArray[i] = O;
            if (finalPieces[i] != null) Destroy(finalPieces[i]);
        }
        if (duringPlacing) {
            canvasOf2Btns.SetActive(false);
            currentPositionFromAvailable = 0;
            duringPlacing = false;
            duringRotationWorkspace = false;
            Destroy(placedPiece);
        }
        SetDefaultCorrComp();
        ResetClock();
        finishedGame = false;
        
        workspace.LeanScale(Vector3.one, 0f);
    }
    public void StartNewRandomGame() {
        GameBasicInit();

        solution = SolutionGenerator.GetNewSolution();
        levelNotRandom = false;
        randomGameBeforeStart = true;
        RenewButtons();

        // LeanTween.scale(clockText.transform.parent.gameObject, Vector3.one, 0.5f);

        workspace.rotation = defaultRotation;
    }
    public void StartNewRandomGame(int seed) {
        GameBasicInit();

        solution = SolutionGenerator.GetNewSolution(seed);
        levelNotRandom = false;
        randomGameBeforeStart = true;
        RenewButtons();

        // LeanTween.scale(clockText.transform.parent.gameObject, Vector3.one, 0.5f);

        workspace.rotation = defaultRotation;
    }

    public void StartNewGame(int level, int seed, bool[] placedSides_) {
        GameBasicInit();

        solution = SolutionGenerator.GetNewSolution(seed);
        openedLevel = level;
        placedSidesFromSolution = placedSides_.Clone() as bool[];
        levelNotRandom = true;
        RenewButtons();

        // LeanTween.scale(clockText.transform.parent.gameObject, Vector3.zero, 0.5f);

        workspace.rotation = defaultRotation;


        for (int i = 0; i < 6; i++) {
            if (placedSides_[i]) {
                PlaceSideAt(solution[i], (side)i);
                int b = 0;
                while (buttonOrder[b] != i) b++;
                EnabledButton(b, false);
            }
        }
        levelMenu.ToggleMenus(0);
    }

    public void RestartGame() {
        GameBasicInit();
        for (int i = 0; i < 6; i++)
            EnabledButton(i, true);

        for (int i = 0; i < 6; i++) {
            if (levelNotRandom && placedSidesFromSolution[i]) {
                PlaceSideAt(solution[i], (side)i);
                int b = 0;
                while (buttonOrder[b] != i) b++;
                EnabledButton(b, false);
            }
        }
        levelMenu.ToggleMenus(0);
    }

    private void FinishedLevel() {
        // for (int i = 0; i < 6; i++) {
        //     Color finishedColor = finalPieces[i].GetComponent<Piece_v2>().color;
        //     finishedColor.b = 0f;
        //     finalPieces[i].GetComponent<Piece_v2>().ChangeColorInTime(finishedColor, 1f);
        // }
        LeanTween.scale(workspace.gameObject, new Vector3(0.5f, 0.5f, 0.5f), 1f);
        GetComponent<SoundScript>().PlayFinishSound();

        if (levelNotRandom) {
            levelMenu.LevelPassed(openedLevel);
        } else {
            SaveInfoState sfs= saveScript.saveInfoState;
            float timeOfGame = Time.time - timeOfStart;
            if (sfs.randomAverageTime != 0f)
                saveScript.saveInfoState.randomAverageTime = ((sfs.randomAverageTime * (float)sfs.randomGamesWon) + timeOfGame) / (float)(sfs.randomGamesWon + 1);
            else
                saveScript.saveInfoState.randomAverageTime = timeOfGame;
            saveScript.saveInfoState.randomGamesWon++;
            if (sfs.randomShortestTime > timeOfGame || sfs.randomShortestTime == 0f)
                saveScript.saveInfoState.randomShortestTime = timeOfGame;
            
            saveScript.SaveInfoData();
            infoPanel.UpdateInfo();

        }

        finishedGame = true;
    }

    // CLOCK

    [Header("Clock:")]
    public InfoPanel infoPanel;
    public TMP_Text clockText;
    private float timeOfStart;

    private void ResetClock() {
        clockText.text = "00:00";
    }

    private void StartTimer() {
        timeOfStart = Time.time;
        randomGameBeforeStart = false;
    }

    // MONOBEHAVIOUR METHODS

    void Awake() {
    }

    void OnGUI() {
        
    }
    void Start()
    {
        SetDefaultCorrComp();
        finalPieces = new GameObject[6];
        Vector3 dir = -(workspace.position - Camera.main.transform.position);
        defaultRotation = workspace.rotation = Quaternion.LookRotation(dir);
        canvasOf2Btns.SetActive(false);
        saveScript = GetComponent<SaveScript>();
        SetButtons();

        StartNewRandomGame();

        // GUIset = 0;
    }

    // private int GUIset;
    void Update()
    {
        // if (GUIset < 2) {
        //     if (GUIset == 1) {
                
                
        //     }
        //     GUIset++;
        // }
        if (!levelNotRandom && !randomGameBeforeStart && !finishedGame) {
            float time = Time.time - timeOfStart;
            clockText.text = (time / 60 >= 10 ? "" : "0") + (int)(time / 60) + ":" + (time % 60 >= 10 ? "" : "0") + (int)(time % 60);
        }
        if (!duringPlacing) {
            placingJustStarted = true;
        }
        if (duringPlacing) {
            if (placingJustStarted) {
                NormalizePlacedSideApperance(available[currentPositionFromAvailable]);
                ApplyClosestToAvailable();

                placedPiece.transform.localPosition = positionForSides[(int)available[currentPositionFromAvailable]];
                placedPiece.transform.localEulerAngles = rotationForSides[(int)available[currentPositionFromAvailable]];
                placedPiece.transform.position += placedPiece.transform.up * movePlacedPieceForwardFor;

                SearchForMistakes();
                placingJustStarted = false;
            }

            // positioning
            if (posState == IndexStateChange.decrease){
                int prevCPFA = currentPositionFromAvailable--;
                if (currentPositionFromAvailable < 0) currentPositionFromAvailable = available.Length - 1;
                duringRotationWorkspace = true;

                placedPiece.transform.localPosition = positionForSides[(int)available[currentPositionFromAvailable]];
                placedPiece.transform.localEulerAngles = rotationForSides[(int)available[currentPositionFromAvailable]];
                placedPiece.transform.position += placedPiece.transform.up * movePlacedPieceForwardFor;

                NormalizePlacedSideApperance(available[prevCPFA], available[currentPositionFromAvailable]);
                SearchForMistakes();
            }
            if (posState == IndexStateChange.increase){
                int prevCPFA = currentPositionFromAvailable++;
                if (currentPositionFromAvailable == available.Length) currentPositionFromAvailable = 0;
                duringRotationWorkspace = true;

                placedPiece.transform.localPosition = positionForSides[(int)available[currentPositionFromAvailable]];
                placedPiece.transform.localEulerAngles = rotationForSides[(int)available[currentPositionFromAvailable]];
                placedPiece.transform.position += placedPiece.transform.up * movePlacedPieceForwardFor;

                NormalizePlacedSideApperance(available[prevCPFA], available[currentPositionFromAvailable]);
                SearchForMistakes();
            }
            

            // rotating
            if (rotState == IndexStateChange.decrease){
                rotState = IndexStateChange.stay;
                duringRotationPiece = true;
                pieceDestinedRotationY -= 90f;
                pieceRotationInInt += 3;
            }
            if (rotState == IndexStateChange.increase){
                rotState = IndexStateChange.stay;
                duringRotationPiece = true;
                pieceDestinedRotationY += 90f;
                pieceRotationInInt += 1;
            }

            // placing
            if (acceptButtonPressed) {
                if (PlaceSideAt(placedPiece.GetComponent<Piece>().GetSetting(), available[currentPositionFromAvailable])) {
                    
                }else {
                    GetComponent<SoundScript>().PlayWrongPlaceSound();
                }
            }
            acceptButtonPressed = false;

            // canceling
            if (cancelButtonPressed) {
                canvasOf2Btns.SetActive(false);

                GetComponent<SoundScript>().PlayCancelPlacingSound();

                placedPiece.GetComponent<Piece>().ChangeTransparencyInTime(0f, 0.3f, true);
                LeanTween.scale(placedPiece, Vector3.zero, 0.3f);
                SetTransparencyOfAllPlacedSides(1f);
                currentPositionFromAvailable = 0;
                duringPlacing = false;
                duringRotationWorkspace = false;
                EnabledButton(placingPieceIndex, true);
                SearchForMistakes();
            }
            cancelButtonPressed = false;

        }
        if (duringRotationPiece) {
            // once every started rotation return sides settings
            if (rotationPieceJustStarted) {
                for (int i = 0; i < 6; i++) {
                    if (placedSidesArray[i]) {
                        finalPieces[i].GetComponent<Piece>().ChangeSetting(CorrComp[i]);
                    }
                }
                rotationPieceJustStarted = false;
            }

            float rotationOfY = pieceDestinedRotationY * Time.deltaTime * 8f;
            pieceDestinedRotationY -= rotationOfY;

            placedPiece.transform.Rotate(new Vector3(
                0,
                rotationOfY,
                0
            ), Space.Self);

            if (pieceDestinedRotationY < 4f && pieceDestinedRotationY > -4f) {
                placedPiece.GetComponent<Piece>().RotateR(pieceRotationInInt);
                placedPiece.transform.localEulerAngles = rotationForSides[(int)available[currentPositionFromAvailable]];
                pieceDestinedRotationY = 0f;
                pieceRotationInInt = 0;
                duringRotationPiece = false;
                rotationPieceJustStarted = true;
                SearchForMistakes();
            }
        }
        // DISABLED FOR NOW
        if (duringRotationWorkspace && false) {
            Quaternion preedit = workspace.rotation;
            Quaternion destinedRotation = defaultRotation * Quaternion.Euler(rotationOfWorkspace[(int)available[currentPositionFromAvailable]]);
            workspace.rotation = Quaternion.Lerp(workspace.rotation, destinedRotation, Time.deltaTime * 10f);
            if (workspace.rotation == preedit) {
                duringRotationWorkspace = false;
            }
        }
        #if UNITY_EDITOR
        if (Input.GetKeyDown(KeyCode.O)) {
            VisualizeDataFromCorrComp();
        }
        if (Input.GetKeyDown(KeyCode.F)) {
            FinishedLevel();
        }
        #endif
    }
}
