public AdvSolution RotateClockwiseByCube(int timesX = 0, int timesY = 0, int timesZ = 0) {
            if ( (timesX != 0 && timesY != 0) || (timesY != 0 && timesZ != 0) || (timesX != 0 && timesZ != 0)) {
                Debug.Log("more than one axis for rotation");
                return this;
            }
            timesX %= 4; timesY %= 4; timesZ %= 4;

            if (timesZ % 2 == 1) {
                RotateClockwiseBySide(Side.front, 3);
                // RotateClockwiseBySide(Side.right, 1);
                bool[,] rightBackup = (bool[,])right.Clone();
                // RotateClockwiseBySide(Side.top, 1);
                right = top;
                // RotateClockwiseBySide(Side.left, 1);
                top = left;
                // RotateClockwiseBySide(Side.bottom, 1);
                left = bottom;
                bottom = rightBackup;
                RotateClockwiseBySide(Side.back, 1);
                timesZ--;
            }
            if (timesZ == 2) {
                RotateClockwiseBySide(Side.front, 2);
                RotateClockwiseBySide(Side.back, 2);
                // RotateClockwiseBySide(Side.right, 2);
                bool[,] temp = (bool[,])right.Clone();
                // RotateClockwiseBySide(Side.left, 2);
                right = left;
                left = temp;
                // RotateClockwiseBySide(Side.top, 2);
                temp = (bool[,])top.Clone();
                // RotateClockwiseBySide(Side.bottom, 2);
                top = bottom;
                bottom = temp;
            }

            if (timesY % 2 == 1) {
                RotateClockwiseBySide(Side.top, 3);
                RotateClockwiseBySide(Side.right, 1);
                bool[,] rightBackup = (bool[,])right.Clone();
                RotateClockwiseBySide(Side.back, 1);
                right = back;
                RotateClockwiseBySide(Side.left, 1);
                back = left;
                RotateClockwiseBySide(Side.front, 1);
                left = front;
                front = rightBackup;
                RotateClockwiseBySide(Side.bottom, 1);
                timesY--;
            }
            if (timesY == 2) {
                RotateClockwiseBySide(Side.top, 2);
                RotateClockwiseBySide(Side.bottom, 2);
                RotateClockwiseBySide(Side.right, 2);
                bool[,] temp = (bool[,])right.Clone();
                RotateClockwiseBySide(Side.left, 2);
                right = left;
                left = temp;
                RotateClockwiseBySide(Side.front, 2);
                temp = (bool[,])front.Clone();
                RotateClockwiseBySide(Side.back, 2);
                front = back;
                back = temp;
            }

            if (timesX % 2 == 1) {
                RotateClockwiseBySide(Side.right, 3);
                RotateClockwiseBySide(Side.top, 2);
                bool[,] topBackup = (bool[,])top.Clone();
                RotateClockwiseBySide(Side.front, 2);
                top = front;
                RotateClockwiseBySide(Side.bottom, 0);
                front = bottom;
                RotateClockwiseBySide(Side.back, 0);
                bottom = back;
                back = topBackup;
                RotateClockwiseBySide(Side.left, 1);
                timesX--;
            }
            if (timesX == 2) {
                RotateClockwiseBySide(Side.right, 2);
                RotateClockwiseBySide(Side.left, 2);
                RotateClockwiseBySide(Side.front, 0);
                bool[,] temp = (bool[,])front.Clone();
                RotateClockwiseBySide(Side.back, 0);
                front = back;
                back = temp;
                RotateClockwiseBySide(Side.top, 2);
                temp = (bool[,])top.Clone();
                RotateClockwiseBySide(Side.bottom, 2);
                top = bottom;
                bottom = temp;
            }
            return this;
        }
        